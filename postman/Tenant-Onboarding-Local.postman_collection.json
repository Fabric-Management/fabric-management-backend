{
  "info": {
    "_postman_id": "tenant-onboarding-local-v3",
    "name": "Tenant Onboarding - Local (v3.1 - Event-Driven)",
    "description": "Complete tenant onboarding flow with Event-Driven architecture\n\nüÜï v3.1.0 Updates (Oct 13, 2025):\n- API Gateway: Correlation ID tracking\n- API Gateway: Security headers validation\n- Event-Driven: Async address & phone creation via Kafka\n- Tests: Response time validation (~400ms target)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.1.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "companyId",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "email",
      "value": "admin@acmetekstil.com",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "correlationId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Register New Tenant (Event-Driven)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test 1: Response status",
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test 2: Response time (should be ~400ms with event-driven)",
              "pm.test('Response time is less than 600ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(600);",
              "});",
              "",
              "// Test 3: API Gateway - Correlation ID header",
              "pm.test('API Gateway: Correlation ID present', function () {",
              "    pm.response.to.have.header('X-Correlation-ID');",
              "    const correlationId = pm.response.headers.get('X-Correlation-ID');",
              "    pm.collectionVariables.set('correlationId', correlationId);",
              "    console.log('‚úÖ Correlation ID:', correlationId);",
              "});",
              "",
              "// Test 4: API Gateway - Request ID header",
              "pm.test('API Gateway: Request ID present', function () {",
              "    pm.response.to.have.header('X-Request-ID');",
              "    console.log('‚úÖ Request ID:', pm.response.headers.get('X-Request-ID'));",
              "});",
              "",
              "// Test 5: API Gateway - Security headers",
              "pm.test('Security: X-Content-Type-Options header', function () {",
              "    pm.response.to.have.header('X-Content-Type-Options');",
              "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');",
              "});",
              "",
              "pm.test('Security: X-Frame-Options header', function () {",
              "    pm.response.to.have.header('X-Frame-Options');",
              "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.eql('DENY');",
              "});",
              "",
              "pm.test('Security: X-XSS-Protection header', function () {",
              "    pm.response.to.have.header('X-XSS-Protection');",
              "});",
              "",
              "// Test 6: Response data validation",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    ",
              "    pm.test('Response has success flag', function () {",
              "        pm.expect(response.success).to.eql(true);",
              "    });",
              "    ",
              "    pm.test('Response contains company ID', function () {",
              "        pm.expect(response.data.companyId).to.exist;",
              "    });",
              "    ",
              "    pm.test('Response contains user ID', function () {",
              "        pm.expect(response.data.userId).to.exist;",
              "    });",
              "    ",
              "    // Save IDs for next requests",
              "    pm.collectionVariables.set('companyId', response.data.companyId);",
              "    pm.collectionVariables.set('userId', response.data.userId);",
              "    ",
              "    console.log('\\nüìä Registration Results:');",
              "    console.log('Company ID:', response.data.companyId);",
              "    console.log('User ID:', response.data.userId);",
              "    console.log('Email:', response.data.email);",
              "    console.log('Message:', response.data.message);",
              "    console.log('Next Step:', response.data.nextStep);",
              "    console.log('\\n‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');",
              "    console.log('\\nüéØ Event-Driven: Address and phone will be created async via Kafka!');",
              "    console.log('Wait 1-2 seconds, then check \"6. Verify Async Data Creation\"');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "X-Correlation-ID",
            "value": "{{$guid}}",
            "description": "Optional: Provide your own correlation ID for tracking",
            "disabled": true
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"companyName\": \"Acme Tekstil A.≈û.\",\n  \"legalName\": \"Acme Tekstil Anonim ≈ûirketi\",\n  \"taxId\": \"1234567890\",\n  \"registrationNumber\": \"REG-2025-001\",\n  \"companyType\": \"CORPORATION\",\n  \"industry\": \"MANUFACTURING\",\n  \"description\": \"Textile manufacturing company\",\n  \"website\": \"https://acmetekstil.com\",\n  \"addressLine1\": \"Organize Sanayi B√∂lgesi 5. Cadde No:42\",\n  \"addressLine2\": \"A Blok Kat:3\",\n  \"city\": \"ƒ∞stanbul\",\n  \"district\": \"Esenyurt\",\n  \"postalCode\": \"34520\",\n  \"country\": \"Turkey\",\n  \"firstName\": \"Ahmet\",\n  \"lastName\": \"Yƒ±lmaz\",\n  \"email\": \"{{email}}\",\n  \"phone\": \"+905551234567\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/public/onboarding/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "public", "onboarding", "register"]
        },
        "description": "üÜï Event-Driven Registration (v3.1.0)\n\nWhat happens:\n1. Company created (synchronous)\n2. User created (synchronous)\n3. Email contact created (synchronous)\n4. **TenantRegisteredEvent published to Kafka** üéØ\n5. Response returned FAST (~400ms)\n\nAsync (1-2 seconds later):\n- Contact Service receives event\n- Company address created\n- Admin phone contact created\n\nBenefits:\n- 50% faster response time\n- Automatic retry via Kafka\n- Loose coupling between services"
      },
      "response": []
    },
    {
      "name": "2. Check Contact (After Email Click)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('API Gateway: Correlation ID present', function () {",
              "    pm.response.to.have.header('X-Correlation-ID');",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('Contact Check:', response.data);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"contactValue\": \"{{email}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/users/auth/check-contact",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "users", "auth", "check-contact"]
        }
      },
      "response": []
    },
    {
      "name": "3. Setup Password (First Login)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    console.log('‚úÖ Password setup successful');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"contactValue\": \"{{email}}\",\n  \"password\": \"AcmeAdmin@123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/users/auth/setup-password",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "users", "auth", "setup-password"]
        }
      },
      "response": []
    },
    {
      "name": "4. Login",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(1000);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    pm.collectionVariables.set('accessToken', response.data.accessToken);",
              "    console.log('‚úÖ Login successful');",
              "    console.log('Access Token:', response.data.accessToken.substring(0, 20) + '...');",
              "    console.log('Token Type:', response.data.tokenType);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"contactValue\": \"{{email}}\",\n  \"password\": \"AcmeAdmin@123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/users/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "users", "auth", "login"]
        }
      },
      "response": []
    },
    {
      "name": "5. Get My Profile (Verify Token)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    console.log('\\nüë§ User Profile:');",
              "    console.log('Name:', response.data.firstName, response.data.lastName);",
              "    console.log('Email:', response.data.email);",
              "    console.log('Role:', response.data.role);",
              "    console.log('Company ID:', response.data.companyId);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/v1/users/me",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "users", "me"]
        }
      },
      "response": []
    },
    {
      "name": "6. Verify Async Data Creation (Address & Phone)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    const contacts = response.data;",
              "    ",
              "    console.log('\\nüìû Contact Verification (Event-Driven):');",
              "    console.log('Total contacts:', contacts.length);",
              "    ",
              "    // Find EMAIL contact (created synchronously)",
              "    const emailContact = contacts.find(c => c.contactType === 'EMAIL');",
              "    if (emailContact) {",
              "        console.log('\\n‚úÖ EMAIL contact (sync):', emailContact.contactValue);",
              "        pm.test('Email contact exists', function () {",
              "            pm.expect(emailContact).to.exist;",
              "        });",
              "    }",
              "    ",
              "    // Find PHONE contact (created async via Kafka event)",
              "    const phoneContact = contacts.find(c => c.contactType === 'PHONE');",
              "    if (phoneContact) {",
              "        console.log('‚úÖ PHONE contact (async/Kafka):', phoneContact.contactValue);",
              "        pm.test('Phone contact created via Kafka event', function () {",
              "            pm.expect(phoneContact).to.exist;",
              "        });",
              "    } else {",
              "        console.log('‚ö†Ô∏è PHONE contact not yet created - wait a bit and retry');",
              "    }",
              "    ",
              "    // Find ADDRESS contact (created async via Kafka event)",
              "    const addressContact = contacts.find(c => c.contactType === 'ADDRESS');",
              "    if (addressContact) {",
              "        console.log('‚úÖ ADDRESS contact (async/Kafka) - ID:', addressContact.id);",
              "        pm.test('Address contact created via Kafka event', function () {",
              "            pm.expect(addressContact).to.exist;",
              "        });",
              "    } else {",
              "        console.log('‚ö†Ô∏è ADDRESS contact not yet created - wait a bit and retry');",
              "    }",
              "    ",
              "    console.log('\\nüéØ Event-Driven Pattern Working!');",
              "    console.log('- Sync: Email contact (immediate)');",
              "    console.log('- Async: Phone + Address (1-2 sec via Kafka)');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/v1/contacts/owner/{{userId}}?ownerType=USER",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "contacts", "owner", "{{userId}}"],
          "query": [
            {
              "key": "ownerType",
              "value": "USER"
            }
          ]
        },
        "description": "üÜï Event-Driven Verification (v3.1.0)\n\nThis endpoint verifies that async data was created via Kafka:\n\n**Expected Results:**\n- EMAIL contact: ‚úÖ Created immediately (sync)\n- PHONE contact: ‚úÖ Created 1-2 sec later (async/Kafka)\n- ADDRESS contact: ‚úÖ Created 1-2 sec later (async/Kafka)\n\n**If missing:** Wait 2-3 seconds and retry this request.\n\n**How it works:**\n1. TenantRegisteredEvent published to Kafka\n2. Contact Service listener receives event\n3. Contact Service creates address + phone\n4. All done automatically with retry/DLQ!"
      },
      "response": []
    },
    {
      "name": "7. Get Company Addresses (Event-Driven)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    const response = pm.response.json();",
              "    const addresses = response.data;",
              "    ",
              "    console.log('\\nüè¢ Company Addresses (Event-Driven):');",
              "    console.log('Total addresses:', addresses.length);",
              "    ",
              "    if (addresses.length > 0) {",
              "        const address = addresses[0];",
              "        console.log('\\n‚úÖ Address created via Kafka event:');",
              "        console.log('Address Line 1:', address.addressLine1);",
              "        console.log('City:', address.city);",
              "        console.log('Country:', address.country);",
              "        console.log('Type:', address.addressType);",
              "        console.log('Primary:', address.isPrimary);",
              "        ",
              "        pm.test('Company address exists', function () {",
              "            pm.expect(addresses.length).to.be.at.least(1);",
              "        });",
              "        ",
              "        pm.test('Address has required fields', function () {",
              "            pm.expect(address.addressLine1).to.exist;",
              "            pm.expect(address.city).to.exist;",
              "            pm.expect(address.country).to.exist;",
              "        });",
              "    } else {",
              "        console.log('‚ö†Ô∏è Address not yet created - wait a bit and retry');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/v1/contacts/addresses/owner/{{companyId}}?ownerType=COMPANY",
          "host": ["{{baseUrl}}"],
          "path": [
            "api",
            "v1",
            "contacts",
            "addresses",
            "owner",
            "{{companyId}}"
          ],
          "query": [
            {
              "key": "ownerType",
              "value": "COMPANY"
            }
          ]
        },
        "description": "Verify company address was created via Kafka event.\n\nExpected: 1 address (WORK type, primary)\nCreated by: Contact Service (via TenantRegisteredEvent)"
      },
      "response": []
    },
    {
      "name": "8. Create New User (by TENANT_ADMIN)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "if (pm.response.code === 201) {",
              "    const response = pm.response.json();",
              "    console.log('‚úÖ New user created:', response.data.id);",
              "    console.log('Name:', response.data.firstName, response.data.lastName);",
              "    console.log('Email:', response.data.email);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"firstName\": \"Mehmet\",\n  \"lastName\": \"Demir\",\n  \"email\": \"mehmet@acmetekstil.com\",\n  \"phone\": \"+905559876543\",\n  \"role\": \"USER\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/users",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "users"]
        }
      },
      "response": []
    }
  ]
}

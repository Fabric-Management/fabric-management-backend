# =============================================================================
# FABRIC MANAGEMENT SYSTEM - SIMPLIFIED DOCKER COMPOSE
# =============================================================================
# KISS principle: Simple, clean, maintainable
# Usage: docker-compose -f docker-compose-complete.yml up -d

version: "3.8"

# =============================================================================
# SHARED CONFIGURATIONS (DRY principle)
# =============================================================================
x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

# =============================================================================
# NETWORKS - Simple single network (KISS)
# =============================================================================
networks:
  fabric-network:
    driver: bridge

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
  redis_data:

# =============================================================================
# SERVICES
# =============================================================================
services:
  # ===========================================================================
  # INFRASTRUCTURE
  # ===========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: fabric-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d:ro
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      <<: *healthcheck-defaults
      start_period: 30s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 2048M
          cpus: "2.0"
        reservations:
          memory: 1024M
          cpus: "1.0"

  redis:
    image: redis:7-alpine
    container_name: fabric-redis
    restart: unless-stopped
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD" --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru;
        else
          echo "WARNING: Redis running without password in development mode";
          redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru;
        fi
      '
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fabric-network
    healthcheck:
      test: |
        if [ -n "$REDIS_PASSWORD" ]; then
          redis-cli -a "$REDIS_PASSWORD" ping
        else
          redis-cli ping
        fi
      <<: *healthcheck-defaults
      start_period: 10s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: fabric-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - fabric-network
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fabric-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_ADVERTISED_HOST:-localhost}:${KAFKA_PORT:-9092},PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - fabric-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      <<: *healthcheck-defaults
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # ===========================================================================
  # MICROSERVICES
  # ===========================================================================
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: user-service
        SERVICE_PORT: 8081
    image: fabric-user-service:latest
    container_name: fabric-user-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      JMX_PORT: 9011
      SERVER_PORT: 8081
    ports:
      - "${USER_SERVICE_PORT:-8081}:8081"
      - "${USER_SERVICE_JMX_PORT:-9011}:9011"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  contact-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: contact-service
        SERVICE_PORT: 8082
    image: fabric-contact-service:latest
    container_name: fabric-contact-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      JMX_PORT: 9012
      SERVER_PORT: 8082
    ports:
      - "${CONTACT_SERVICE_PORT:-8082}:8082"
      - "${CONTACT_SERVICE_JMX_PORT:-9012}:9012"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  company-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: company-service
        SERVICE_PORT: 8083
    image: fabric-company-service:latest
    container_name: fabric-company-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      JMX_PORT: 9013
      USER_SERVICE_HOST: user-service
      CONTACT_SERVICE_HOST: contact-service
      USER_SERVICE_URL: http://user-service:8081
      CONTACT_SERVICE_URL: http://contact-service:8082
      SERVER_PORT: 8083
    ports:
      - "${COMPANY_SERVICE_PORT:-8083}:8083"
      - "${COMPANY_SERVICE_JMX_PORT:-9013}:9013"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

package com.fabricmanagement.common.platform.communication.domain.strategy;

import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Component;

/**
 * Email verification strategy - Priority 2.
 *
 * <p>Sends verification codes via SMTP email.</p>
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class EmailStrategy implements VerificationStrategy {

    private final JavaMailSender mailSender;

    @Value("${application.mail.from-email}")
    private String fromEmail;

    @Value("${application.mail.from-name}")
    private String fromName;

    @Override
    public void sendVerificationCode(String recipient, String code) {
        log.info("Sending verification email to: {}", recipient);

        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(String.format("%s <%s>", fromName, fromEmail));
            message.setTo(recipient);
            message.setSubject("Verify your account - " + fromName);
            message.setText(buildEmailBody(code));

            mailSender.send(message);

            log.info("✅ Verification email sent successfully to: {}", recipient);
        } catch (Exception e) {
            log.error("❌ Failed to send verification email to: {}", recipient, e);
            throw new RuntimeException("Email sending failed: " + e.getMessage(), e);
        }
    }

    /**
     * Send custom email with HTML content.
     *
     * <p>Note: HTML content is typically generated by EmailTemplateService from templates.</p>
     *
     * @param recipient Email address
     * @param subject Email subject
     * @param htmlBody Email body (HTML content - rendered from template)
     */
    public void sendEmail(String recipient, String subject, String htmlBody) {
        log.info("Sending custom email to: {}", recipient);

        try {
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true, "UTF-8");
            
            helper.setFrom(String.format("%s <%s>", fromName, fromEmail));
            helper.setTo(recipient);
            helper.setSubject(subject);
            helper.setText(htmlBody, true); // true = HTML content
            
            // ✅ Reply-to header (Hotmail/Outlook requirement)
            helper.setReplyTo(fromEmail, fromName + " Support");
            
            // ✅ Spam prevention headers for better deliverability (especially Hotmail/Outlook)
            mimeMessage.setHeader("List-Unsubscribe", "<mailto:" + fromEmail + "?subject=Unsubscribe>");
            mimeMessage.setHeader("List-Unsubscribe-Post", "List-Unsubscribe=One-Click");
            mimeMessage.setHeader("X-Auto-Response-Suppress", "All");
            mimeMessage.setHeader("Precedence", "bulk");
            
            // ✅ Priority header (High = transactional emails)
            mimeMessage.setHeader("X-Priority", "1");
            mimeMessage.setHeader("Importance", "High");
            
            // ✅ Message-ID for tracking
            mimeMessage.setHeader("Message-ID", generateMessageId());

            mailSender.send(mimeMessage);

            log.info("✅ Custom email sent successfully to: {}", recipient);
        } catch (Exception e) {
            log.error("❌ Failed to send custom email to: {}", recipient, e);
            throw new RuntimeException("Email sending failed: " + e.getMessage(), e);
        }
    }
    
    /**
     * Generate unique Message-ID for email tracking.
     */
    private String generateMessageId() {
        // Format: <timestamp.nanotime@domain.com>
        // Uses System.nanoTime() instead of deprecated Thread.getId()
        String domain = fromEmail.contains("@") 
            ? fromEmail.substring(fromEmail.indexOf("@") + 1) 
            : "fabricmanagement.com";
        return String.format("<%d.%d@%s>", 
            System.currentTimeMillis(), 
            System.nanoTime() % 1_000_000_000, // Use nanosecond precision (modulo to keep reasonable size)
            domain);
    }

    @Override
    public boolean isAvailable() {
        // Check if mail sender is configured
        try {
            return mailSender != null;
        } catch (Exception e) {
            log.warn("Email sender not available: {}", e.getMessage());
            return false;
        }
    }

    @Override
    public int priority() {
        return 2; // Priority 2 (after WhatsApp)
    }

    @Override
    public String name() {
        return "Email";
    }

    private String buildEmailBody(String code) {
        return String.format("""
            Welcome to %s!
            
            Hello,
            
            Thank you for registering. Please verify your email address using the code below:
            
            %s
            
            This code will expire in 15 minutes.
            
            If you didn't create this account, please ignore this email.
            
            Best regards,
            %s Team
            
            ---
            This is an automated message, please do not reply.
            """, fromName, code, fromName);
    }
}


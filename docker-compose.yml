# ==============================================
# FABRIC MANAGEMENT SYSTEM - CLEAN DOCKER COMPOSE
# ==============================================
# Temiz ve optimize edilmi≈ü yapƒ±landƒ±rma
# Docker Compose v2+ specification (version field is obsolete)

# Load environment variables from .env file
# Copy .env.example to .env and update values before running

# ==============================================
# SHARED CONFIGURATIONS (DRY principle)
# ==============================================
x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

networks:
  fabric-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

services:
  # ==============================================
  # DATABASE - PostgreSQL 15
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: fabric-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2048M
          cpus: "2.0"
        reservations:
          memory: 1024M
          cpus: "1.0"

  # ==============================================
  # CACHE - Redis 7
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: fabric-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      sh -c '
        if [ -z "$$REDIS_PASSWORD" ]; then
          echo "ERROR: REDIS_PASSWORD environment variable is required!";
          exit 1;
        fi
        redis-server --requirepass "$$REDIS_PASSWORD" --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru;
      '
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fabric-network
    healthcheck:
      test: |
        if [ -n "$REDIS_PASSWORD" ]; then
          redis-cli -a "$REDIS_PASSWORD" ping
        else
          redis-cli ping
        fi
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # ==============================================
  # MESSAGE BROKER - Kafka & Zookeeper
  # ==============================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: fabric-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_DATA_LOG_DIR: /var/lib/zookeeper/log
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/commands/ruok"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fabric-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://${KAFKA_ADVERTISED_HOST:-localhost}:${KAFKA_PORT:-9092},PLAINTEXT_INTERNAL://kafka:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT_INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # ‚úÖ Keep auto-create for backward compatibility, but init script is preferred
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - fabric-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # ==============================================
  # KAFKA TOPIC INIT (Idempotent)
  # ==============================================
  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fabric-kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - fabric-network
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "üîç Waiting for Kafka to be ready..."
        sleep 5

        echo "üì® Creating Kafka topics (idempotent)..."

        # Auth Service Topics
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic auth-events --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.login --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.logout --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.registration --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic password.changed --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic account.locked --partitions 3 --replication-factor 1 --config retention.ms=604800000

        # User Service Topics
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.created --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.updated --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.deleted --partitions 3 --replication-factor 1 --config retention.ms=604800000

        # Company Service Topics
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic company-events --partitions 3 --replication-factor 1 --config retention.ms=604800000

        # Contact Service Topics
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic contact.created --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic contact.verified --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic contact.deleted --partitions 3 --replication-factor 1 --config retention.ms=604800000

        # Tenant Onboarding Topics
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic tenant-events --partitions 3 --replication-factor 1 --config retention.ms=604800000

        # Policy & Audit Topics
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic policy.audit --partitions 3 --replication-factor 1 --config retention.ms=2592000000

        # Notification Service Topics
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic email-notifications --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic sms-notifications --partitions 3 --replication-factor 1 --config retention.ms=604800000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic domain-events --partitions 3 --replication-factor 1 --config retention.ms=604800000

        # DLT Topics (Dead Letter Topics)
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic auth-events.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.login.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.logout.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.registration.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic password.changed.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic account.locked.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.created.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.updated.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic user.deleted.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic company-events.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic contact.created.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic contact.verified.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic contact.deleted.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic tenant-events.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic policy.audit.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic email-notifications.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic sms-notifications.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic domain-events.DLT --partitions 1 --replication-factor 1 --config retention.ms=7776000000

        echo "‚úÖ Kafka topics created successfully!"

        echo "üìã Current topics:"
        kafka-topics --bootstrap-server kafka:9093 --list
    restart: "no"

  # ==============================================
  # API GATEWAY - Central Entry Point
  # ==============================================
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: api-gateway
        SERVICE_PORT: 8080
    image: fabric-api-gateway:latest
    container_name: fabric-api-gateway
    hostname: api-gateway-instance
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL:-http://auth-service:8085}
      USER_SERVICE_URL: ${USER_SERVICE_URL:-http://user-service:8081}
      COMPANY_SERVICE_URL: ${COMPANY_SERVICE_URL:-http://company-service:8083}
      CONTACT_SERVICE_URL: ${CONTACT_SERVICE_URL:-http://contact-service:8082}
      NOTIFICATION_SERVICE_URL: ${NOTIFICATION_SERVICE_URL:-http://notification-service:8084}
      SERVER_PORT: 8080
      # ‚úÖ JVM Tuning (50% of container memory = 384M)
      JAVA_OPTS: ${GATEWAY_JAVA_OPTS:--Xms384M -Xmx384M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp}
      # ‚úÖ API Gateway - Resilience4j Circuit Breaker (ZERO HARDCODED)
      GATEWAY_CB_SLIDING_WINDOW: ${GATEWAY_CB_SLIDING_WINDOW:-100}
      GATEWAY_CB_MIN_CALLS: ${GATEWAY_CB_MIN_CALLS:-10}
      GATEWAY_CB_HALF_OPEN_CALLS: ${GATEWAY_CB_HALF_OPEN_CALLS:-5}
      GATEWAY_CB_WAIT_DURATION: ${GATEWAY_CB_WAIT_DURATION:-30s}
      GATEWAY_CB_FAILURE_THRESHOLD: ${GATEWAY_CB_FAILURE_THRESHOLD:-50}
      GATEWAY_CB_SLOW_CALL_THRESHOLD: ${GATEWAY_CB_SLOW_CALL_THRESHOLD:-50}
      GATEWAY_CB_SLOW_CALL_DURATION: ${GATEWAY_CB_SLOW_CALL_DURATION:-8s}
      # ‚úÖ API Gateway - Service Timeouts (Match with microservices!)
      GATEWAY_DEFAULT_TIMEOUT: ${GATEWAY_DEFAULT_TIMEOUT:-15s}
      USER_SERVICE_TIMEOUT: ${USER_SERVICE_TIMEOUT:-15s}
      COMPANY_SERVICE_TIMEOUT: ${COMPANY_SERVICE_TIMEOUT:-15s}
      CONTACT_SERVICE_TIMEOUT: ${CONTACT_SERVICE_TIMEOUT:-15s}
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 45s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: "0.75"
        reservations:
          memory: 384M
          cpus: "0.5"

  # ==============================================
  # MICROSERVICES
  # ==============================================

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: auth-service
        SERVICE_PORT: 8085
    image: fabric-auth-service:latest
    container_name: fabric-auth-service
    hostname: auth-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AUTH_SERVICE_KAFKA_GROUP_ID: ${AUTH_SERVICE_KAFKA_GROUP_ID:-auth-service-group}
      AUTH_SERVICE_PORT: ${AUTH_SERVICE_PORT:-8085}
      JWT_SECRET: ${JWT_SECRET:-fabric-management-jwt-secret-key-2024}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-604800000}
      AUTH_PASSWORD_MIN_LENGTH: ${AUTH_PASSWORD_MIN_LENGTH:-8}
      AUTH_PASSWORD_REQUIRE_SPECIAL: ${AUTH_PASSWORD_REQUIRE_SPECIAL:-true}
      AUTH_PASSWORD_REQUIRE_NUMBERS: ${AUTH_PASSWORD_REQUIRE_NUMBERS:-true}
      AUTH_PASSWORD_REQUIRE_UPPERCASE: ${AUTH_PASSWORD_REQUIRE_UPPERCASE:-true}
      AUTH_PASSWORD_MAX_FAILED_ATTEMPTS: ${AUTH_PASSWORD_MAX_FAILED_ATTEMPTS:-5}
      AUTH_SESSION_TIMEOUT: ${AUTH_SESSION_TIMEOUT:-1800}
      AUTH_MAX_SESSIONS: ${AUTH_MAX_SESSIONS:-5}
      JAVA_OPTS: ${AUTH_JAVA_OPTS:--Xms256M -Xmx256M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp}
    ports:
      - "${AUTH_SERVICE_PORT:-8085}:8085"
    volumes:
      - ./logs:/app/logs
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/api/v1/auth/health"]
      <<: *healthcheck-defaults
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  notification-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: notification-service
        SERVICE_PORT: 8084
    image: fabric-notification-service:latest
    container_name: fabric-notification-service
    hostname: notification-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-86400000}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9014
      SERVER_PORT: 8084
      # ‚úÖ JVM Tuning (50% of container memory = 384M)
      JAVA_OPTS: ${NOTIFICATION_JAVA_OPTS:--Xms384M -Xmx384M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp}
      # ‚úÖ Platform Email Configuration (SMTP - Hostinger)
      PLATFORM_SMTP_HOST: ${PLATFORM_SMTP_HOST:-smtp.hostinger.com}
      PLATFORM_SMTP_PORT: ${PLATFORM_SMTP_PORT:-465}
      PLATFORM_SMTP_USERNAME: ${PLATFORM_SMTP_USERNAME:-info@storeandsale.shop}
      PLATFORM_SMTP_PASSWORD: ${PLATFORM_SMTP_PASSWORD}
      PLATFORM_EMAIL_FROM: ${PLATFORM_EMAIL_FROM:-info@storeandsale.shop}
      PLATFORM_EMAIL_FROM_NAME: ${PLATFORM_EMAIL_FROM_NAME:-FabriCode}
      # ‚úÖ Platform Branding (for system emails)
      PLATFORM_NAME: ${PLATFORM_NAME:-FabriCode}
      PLATFORM_COMPANY: ${PLATFORM_COMPANY:-Akkayalar Group}
      # ‚úÖ Platform WhatsApp Configuration (Meta Cloud API)
      PLATFORM_WHATSAPP_ENABLED: ${PLATFORM_WHATSAPP_ENABLED:-true}
      PLATFORM_WHATSAPP_PROVIDER: ${PLATFORM_WHATSAPP_PROVIDER:-META}
      PLATFORM_WHATSAPP_ACCESS_TOKEN: ${PLATFORM_WHATSAPP_ACCESS_TOKEN}
      PLATFORM_WHATSAPP_PHONE_NUMBER_ID: ${PLATFORM_WHATSAPP_PHONE_NUMBER_ID}
      PLATFORM_WHATSAPP_WABA_ID: ${PLATFORM_WHATSAPP_WABA_ID}
      PLATFORM_WHATSAPP_FROM_NUMBER: ${PLATFORM_WHATSAPP_FROM_NUMBER:-+447553838399}
      PLATFORM_WHATSAPP_TEST_NUMBER: ${PLATFORM_WHATSAPP_TEST_NUMBER}
      # ‚úÖ Platform SMS Configuration (Disabled)
      PLATFORM_SMS_ENABLED: ${PLATFORM_SMS_ENABLED:-false}
      PLATFORM_SMS_FROM_NUMBER: ${PLATFORM_SMS_FROM_NUMBER:-+447553838399}
      # ‚úÖ Notification Configuration
      NOTIFICATION_RETRY_MAX_ATTEMPTS: ${NOTIFICATION_RETRY_MAX_ATTEMPTS:-3}
      NOTIFICATION_RETRY_BACKOFF_MS: ${NOTIFICATION_RETRY_BACKOFF_MS:-1000}
      VERIFICATION_CODE_LENGTH: ${VERIFICATION_CODE_LENGTH:-6}
      VERIFICATION_CODE_EXPIRATION_MINUTES: ${VERIFICATION_CODE_EXPIRATION_MINUTES:-15}
    ports:
      - "${NOTIFICATION_SERVICE_JMX_PORT:-9014}:9014" # JMX for monitoring
      # HTTP port 8084 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 75s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: "0.75"
        reservations:
          memory: 384M
          cpus: "0.5"

  user-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: user-service
        SERVICE_PORT: 8081
    image: fabric-user-service:latest
    container_name: fabric-user-service
    hostname: user-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9011
      SERVER_PORT: 8081
      # ‚úÖ JVM Tuning (50% of container memory = 512M)
      JAVA_OPTS: ${USER_SERVICE_JAVA_OPTS:--Xms512M -Xmx512M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp}
      CONTACT_SERVICE_URL: ${CONTACT_SERVICE_URL:-http://contact-service:8082}
      COMPANY_SERVICE_URL: ${COMPANY_SERVICE_URL:-http://company-service:8083}
      # ‚úÖ Resilience4j - Circuit Breaker (ZERO HARDCODED)
      FEIGN_CB_SLIDING_WINDOW: ${FEIGN_CB_SLIDING_WINDOW:-100}
      FEIGN_CB_MIN_CALLS: ${FEIGN_CB_MIN_CALLS:-10}
      FEIGN_CB_FAILURE_THRESHOLD: ${FEIGN_CB_FAILURE_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_THRESHOLD: ${FEIGN_CB_SLOW_CALL_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_DURATION: ${FEIGN_CB_SLOW_CALL_DURATION:-5000}
      FEIGN_CB_WAIT_DURATION: ${FEIGN_CB_WAIT_DURATION:-30s}
      FEIGN_CB_HALF_OPEN_CALLS: ${FEIGN_CB_HALF_OPEN_CALLS:-5}
      # ‚úÖ Resilience4j - Retry
      FEIGN_RETRY_MAX_ATTEMPTS: ${FEIGN_RETRY_MAX_ATTEMPTS:-3}
      FEIGN_RETRY_WAIT_DURATION: ${FEIGN_RETRY_WAIT_DURATION:-1000}
      FEIGN_RETRY_MULTIPLIER: ${FEIGN_RETRY_MULTIPLIER:-2}
      # ‚úÖ Resilience4j - Timeout
      FEIGN_DEFAULT_TIMEOUT: ${FEIGN_DEFAULT_TIMEOUT:-10s}
      CONTACT_SERVICE_TIMEOUT: ${CONTACT_SERVICE_TIMEOUT:-15s}
      COMPANY_SERVICE_TIMEOUT: ${COMPANY_SERVICE_TIMEOUT:-15s}
    # Ports: Only JMX exposed for monitoring (HTTP via Gateway only)
    ports:
      - "${USER_SERVICE_JMX_PORT:-9011}:9011" # JMX for monitoring
      # HTTP port 8081 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  contact-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: contact-service
        SERVICE_PORT: 8082
    image: fabric-contact-service:latest
    container_name: fabric-contact-service
    hostname: contact-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9012
      SERVER_PORT: 8082
      # ‚úÖ JVM Tuning (50% of container memory = 512M)
      JAVA_OPTS: ${CONTACT_JAVA_OPTS:--Xms512M -Xmx512M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp}
    # Ports: Only JMX exposed for monitoring (HTTP via Gateway only)
    ports:
      - "${CONTACT_SERVICE_JMX_PORT:-9012}:9012" # JMX for monitoring
      # HTTP port 8082 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  company-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: company-service
        SERVICE_PORT: 8083
    image: fabric-company-service:latest
    container_name: fabric-company-service
    hostname: company-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      # ‚úÖ GOOGLE/AMAZON LEVEL: No service dependencies!
      # Services start in parallel - Feign fallback handles initial unavailability
      # Resilient architecture: One service down doesn't block others
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9013
      USER_SERVICE_URL: ${USER_SERVICE_URL:-http://user-service:8081}
      CONTACT_SERVICE_URL: ${CONTACT_SERVICE_URL:-http://contact-service:8082}
      SERVER_PORT: 8083
      # ‚úÖ JVM Tuning (50% of container memory = 512M)
      JAVA_OPTS: ${COMPANY_JAVA_OPTS:--Xms512M -Xmx512M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp}
      # ‚úÖ Resilience4j - Circuit Breaker (ZERO HARDCODED)
      FEIGN_CB_SLIDING_WINDOW: ${FEIGN_CB_SLIDING_WINDOW:-100}
      FEIGN_CB_MIN_CALLS: ${FEIGN_CB_MIN_CALLS:-10}
      FEIGN_CB_FAILURE_THRESHOLD: ${FEIGN_CB_FAILURE_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_THRESHOLD: ${FEIGN_CB_SLOW_CALL_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_DURATION: ${FEIGN_CB_SLOW_CALL_DURATION:-5000}
      FEIGN_CB_WAIT_DURATION: ${FEIGN_CB_WAIT_DURATION:-30s}
      FEIGN_CB_HALF_OPEN_CALLS: ${FEIGN_CB_HALF_OPEN_CALLS:-5}
      # ‚úÖ Resilience4j - Retry
      FEIGN_RETRY_MAX_ATTEMPTS: ${FEIGN_RETRY_MAX_ATTEMPTS:-3}
      FEIGN_RETRY_WAIT_DURATION: ${FEIGN_RETRY_WAIT_DURATION:-1000}
      FEIGN_RETRY_MULTIPLIER: ${FEIGN_RETRY_MULTIPLIER:-2}
      # ‚úÖ Resilience4j - Timeout
      FEIGN_DEFAULT_TIMEOUT: ${FEIGN_DEFAULT_TIMEOUT:-10s}
      USER_SERVICE_TIMEOUT: ${USER_SERVICE_TIMEOUT:-15s}
      CONTACT_SERVICE_TIMEOUT: ${CONTACT_SERVICE_TIMEOUT:-15s}
    # Ports: Only JMX exposed for monitoring (HTTP via Gateway only)
    ports:
      - "${COMPANY_SERVICE_JMX_PORT:-9013}:9013" # JMX for monitoring
      # HTTP port 8083 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  fiber-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: fiber-service
        SERVICE_PORT: 8094
    image: fabric-fiber-service:latest
    container_name: fabric-fiber-service
    hostname: fiber-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9094
      SERVER_PORT: 8094
      # ‚úÖ JVM Tuning (50% of container memory = 384M)
      JAVA_OPTS: ${FIBER_JAVA_OPTS:--Xms384M -Xmx384M -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp}
    # Ports: Only JMX exposed for monitoring (HTTP via Gateway only)
    ports:
      - "${FIBER_SERVICE_JMX_PORT:-9094}:9094" # JMX for monitoring
      # HTTP port 8094 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8094/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: "0.75"
        reservations:
          memory: 384M
          cpus: "0.5"

  # ==============================================
  # MONITORING STACK - Prometheus + Grafana + Alertmanager
  # ==============================================

  # Prometheus - Metrics Collection & Time-Series Database
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: fabric-prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=30d"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    networks:
      - fabric-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      api-gateway:
        condition: service_healthy
      user-service:
        condition: service_healthy
      company-service:
        condition: service_healthy
      contact-service:
        condition: service_healthy
      fiber-service:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # Grafana - Metrics Visualization & Dashboards
  grafana:
    image: grafana/grafana:10.2.2
    container_name: fabric-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
      GF_SERVER_SERVE_FROM_SUB_PATH: false
      GF_USERS_ALLOW_SIGN_UP: false
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_DATABASE_WAL: true
      GF_LOG_LEVEL: ${GRAFANA_LOG_LEVEL:-info}
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - fabric-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"

  # Alertmanager - Alert Routing & Notification Management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: fabric-alertmanager
    restart: unless-stopped
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://localhost:9093"
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    networks:
      - fabric-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9093/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.1"
        reservations:
          memory: 64M
          cpus: "0.05"

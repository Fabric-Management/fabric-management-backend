# ==============================================
# FABRIC MANAGEMENT - MODULAR MONOLITH
# ==============================================
# Infrastructure services only
# Application runs externally (IntelliJ or make app-run)
# Updated: 2025-10-25

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

networks:
  fabric-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:

services:
  # ==============================================
  # DATABASE - PostgreSQL 15
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: fabric-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:?error}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?error}
      POSTGRES_DB: ${POSTGRES_DB:?error}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging: *default-logging

  # ==============================================
  # CACHE - Redis 7
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: fabric-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_MAX_MEMORY: ${REDIS_MAX_MEMORY:-256mb}
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD" --appendonly yes --maxmemory $$REDIS_MAX_MEMORY --maxmemory-policy allkeys-lru;
        else
          redis-server --appendonly yes --maxmemory $$REDIS_MAX_MEMORY --maxmemory-policy allkeys-lru;
        fi
      '
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging: *default-logging

  # ==============================================
  # MESSAGE BROKER - Zookeeper (for Kafka)
  # ==============================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: fabric-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT:-2181}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME:-2000}
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_data:/var/lib/zookeeper/log
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging: *default-logging

  # ==============================================
  # MESSAGE BROKER - Kafka
  # ==============================================
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: fabric-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID:-1}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_CLIENT_PORT:-2181}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:${KAFKA_PORT:-9092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR:-1}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_AUTO_CREATE_TOPICS:-true}
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - fabric-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging: *default-logging

  # ==============================================
  # MONITORING (Optional - Uncomment when needed)
  # ==============================================
  # YAGNI: Not needed for development phase
  # Uncomment below when ready for production monitoring
  
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: fabric-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - fabric-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: fabric-grafana
  #   restart: unless-stopped
  #   environment:
  #     GF_SECURITY_ADMIN_USER: admin
  #     GF_SECURITY_ADMIN_PASSWORD: admin
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - fabric-network
  #   depends_on:
  #     - prometheus

# ==============================================
# FABRIC MANAGEMENT SYSTEM - CLEAN DOCKER COMPOSE
# ==============================================
# Temiz ve optimize edilmiş yapılandırma
# Docker Compose v2+ specification (version field is obsolete)

# Load environment variables from .env file
# Copy .env.example to .env and update values before running

# ==============================================
# SHARED CONFIGURATIONS (DRY principle)
# ==============================================
x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

networks:
  fabric-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

services:
  # ==============================================
  # DATABASE - PostgreSQL 15
  # ==============================================
  postgres:
    image: postgres:15-alpine
    container_name: fabric-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2048M
          cpus: "2.0"
        reservations:
          memory: 1024M
          cpus: "1.0"

  # ==============================================
  # CACHE - Redis 7
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: fabric-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      sh -c '
        if [ -z "$$REDIS_PASSWORD" ]; then
          echo "ERROR: REDIS_PASSWORD environment variable is required!";
          exit 1;
        fi
        redis-server --requirepass "$$REDIS_PASSWORD" --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru;
      '
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fabric-network
    healthcheck:
      test: |
        if [ -n "$REDIS_PASSWORD" ]; then
          redis-cli -a "$REDIS_PASSWORD" ping
        else
          redis-cli ping
        fi
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  # ==============================================
  # MESSAGE BROKER - Kafka & Zookeeper
  # ==============================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: fabric-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/commands/ruok"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: fabric-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://${KAFKA_ADVERTISED_HOST:-localhost}:${KAFKA_PORT:-9092},PLAINTEXT_INTERNAL://kafka:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT_INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - fabric-network
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # ==============================================
  # API GATEWAY - Central Entry Point
  # ==============================================
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: api-gateway
        SERVICE_PORT: 8080
    image: fabric-api-gateway:latest
    container_name: fabric-api-gateway
    hostname: api-gateway-instance
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      USER_SERVICE_URL: ${USER_SERVICE_URL:-http://user-service:8081}
      COMPANY_SERVICE_URL: ${COMPANY_SERVICE_URL:-http://company-service:8083}
      CONTACT_SERVICE_URL: ${CONTACT_SERVICE_URL:-http://contact-service:8082}
      NOTIFICATION_SERVICE_URL: ${NOTIFICATION_SERVICE_URL:-http://notification-service:8084}
      SERVER_PORT: 8080
      # ✅ API Gateway - Resilience4j Circuit Breaker (ZERO HARDCODED)
      GATEWAY_CB_SLIDING_WINDOW: ${GATEWAY_CB_SLIDING_WINDOW:-100}
      GATEWAY_CB_MIN_CALLS: ${GATEWAY_CB_MIN_CALLS:-10}
      GATEWAY_CB_HALF_OPEN_CALLS: ${GATEWAY_CB_HALF_OPEN_CALLS:-5}
      GATEWAY_CB_WAIT_DURATION: ${GATEWAY_CB_WAIT_DURATION:-30s}
      GATEWAY_CB_FAILURE_THRESHOLD: ${GATEWAY_CB_FAILURE_THRESHOLD:-50}
      GATEWAY_CB_SLOW_CALL_THRESHOLD: ${GATEWAY_CB_SLOW_CALL_THRESHOLD:-50}
      GATEWAY_CB_SLOW_CALL_DURATION: ${GATEWAY_CB_SLOW_CALL_DURATION:-8s}
      # ✅ API Gateway - Service Timeouts (Match with microservices!)
      GATEWAY_DEFAULT_TIMEOUT: ${GATEWAY_DEFAULT_TIMEOUT:-15s}
      USER_SERVICE_TIMEOUT: ${USER_SERVICE_TIMEOUT:-15s}
      COMPANY_SERVICE_TIMEOUT: ${COMPANY_SERVICE_TIMEOUT:-15s}
      CONTACT_SERVICE_TIMEOUT: ${CONTACT_SERVICE_TIMEOUT:-15s}
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 45s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: "0.75"
        reservations:
          memory: 384M
          cpus: "0.5"

  # ==============================================
  # MICROSERVICES
  # ==============================================

  notification-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: notification-service
        SERVICE_PORT: 8084
    image: fabric-notification-service:latest
    container_name: fabric-notification-service
    hostname: notification-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-86400000}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9014
      SERVER_PORT: 8084
      # ✅ Platform Email Configuration (SMTP - Hostinger)
      PLATFORM_SMTP_HOST: ${PLATFORM_SMTP_HOST:-smtp.hostinger.com}
      PLATFORM_SMTP_PORT: ${PLATFORM_SMTP_PORT:-465}
      PLATFORM_SMTP_USERNAME: ${PLATFORM_SMTP_USERNAME:-info@storeandsale.shop}
      PLATFORM_SMTP_PASSWORD: ${PLATFORM_SMTP_PASSWORD}
      PLATFORM_EMAIL_FROM: ${PLATFORM_EMAIL_FROM:-info@storeandsale.shop}
      PLATFORM_EMAIL_FROM_NAME: ${PLATFORM_EMAIL_FROM_NAME:-Fabricode}
      # ✅ Platform WhatsApp Configuration (Meta Cloud API)
      PLATFORM_WHATSAPP_ENABLED: ${PLATFORM_WHATSAPP_ENABLED:-true}
      PLATFORM_WHATSAPP_PROVIDER: ${PLATFORM_WHATSAPP_PROVIDER:-META}
      PLATFORM_WHATSAPP_ACCESS_TOKEN: ${PLATFORM_WHATSAPP_ACCESS_TOKEN}
      PLATFORM_WHATSAPP_PHONE_NUMBER_ID: ${PLATFORM_WHATSAPP_PHONE_NUMBER_ID}
      PLATFORM_WHATSAPP_WABA_ID: ${PLATFORM_WHATSAPP_WABA_ID}
      PLATFORM_WHATSAPP_FROM_NUMBER: ${PLATFORM_WHATSAPP_FROM_NUMBER:-+447553838399}
      PLATFORM_WHATSAPP_TEST_NUMBER: ${PLATFORM_WHATSAPP_TEST_NUMBER}
      # ✅ Platform SMS Configuration (Disabled)
      PLATFORM_SMS_ENABLED: ${PLATFORM_SMS_ENABLED:-false}
      PLATFORM_SMS_FROM_NUMBER: ${PLATFORM_SMS_FROM_NUMBER:-+447553838399}
      # ✅ Notification Configuration
      NOTIFICATION_RETRY_MAX_ATTEMPTS: ${NOTIFICATION_RETRY_MAX_ATTEMPTS:-3}
      NOTIFICATION_RETRY_BACKOFF_MS: ${NOTIFICATION_RETRY_BACKOFF_MS:-1000}
      VERIFICATION_CODE_LENGTH: ${VERIFICATION_CODE_LENGTH:-6}
      VERIFICATION_CODE_EXPIRATION_MINUTES: ${VERIFICATION_CODE_EXPIRATION_MINUTES:-15}
    ports:
      - "${NOTIFICATION_SERVICE_JMX_PORT:-9014}:9014" # JMX for monitoring
      # HTTP port 8084 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 75s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: "0.75"
        reservations:
          memory: 384M
          cpus: "0.5"

  user-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: user-service
        SERVICE_PORT: 8081
    image: fabric-user-service:latest
    container_name: fabric-user-service
    hostname: user-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9011
      SERVER_PORT: 8081
      CONTACT_SERVICE_URL: ${CONTACT_SERVICE_URL:-http://contact-service:8082}
      COMPANY_SERVICE_URL: ${COMPANY_SERVICE_URL:-http://company-service:8083}
      # ✅ Resilience4j - Circuit Breaker (ZERO HARDCODED)
      FEIGN_CB_SLIDING_WINDOW: ${FEIGN_CB_SLIDING_WINDOW:-100}
      FEIGN_CB_MIN_CALLS: ${FEIGN_CB_MIN_CALLS:-10}
      FEIGN_CB_FAILURE_THRESHOLD: ${FEIGN_CB_FAILURE_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_THRESHOLD: ${FEIGN_CB_SLOW_CALL_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_DURATION: ${FEIGN_CB_SLOW_CALL_DURATION:-5000}
      FEIGN_CB_WAIT_DURATION: ${FEIGN_CB_WAIT_DURATION:-30s}
      FEIGN_CB_HALF_OPEN_CALLS: ${FEIGN_CB_HALF_OPEN_CALLS:-5}
      # ✅ Resilience4j - Retry
      FEIGN_RETRY_MAX_ATTEMPTS: ${FEIGN_RETRY_MAX_ATTEMPTS:-3}
      FEIGN_RETRY_WAIT_DURATION: ${FEIGN_RETRY_WAIT_DURATION:-1000}
      FEIGN_RETRY_MULTIPLIER: ${FEIGN_RETRY_MULTIPLIER:-2}
      # ✅ Resilience4j - Timeout
      FEIGN_DEFAULT_TIMEOUT: ${FEIGN_DEFAULT_TIMEOUT:-10s}
      CONTACT_SERVICE_TIMEOUT: ${CONTACT_SERVICE_TIMEOUT:-15s}
      COMPANY_SERVICE_TIMEOUT: ${COMPANY_SERVICE_TIMEOUT:-15s}
    # Ports: Only JMX exposed for monitoring (HTTP via Gateway only)
    ports:
      - "${USER_SERVICE_JMX_PORT:-9011}:9011" # JMX for monitoring
      # HTTP port 8081 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  contact-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: contact-service
        SERVICE_PORT: 8082
    image: fabric-contact-service:latest
    container_name: fabric-contact-service
    hostname: contact-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9012
      SERVER_PORT: 8082
    # Ports: Only JMX exposed for monitoring (HTTP via Gateway only)
    ports:
      - "${CONTACT_SERVICE_JMX_PORT:-9012}:9012" # JMX for monitoring
      # HTTP port 8082 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  company-service:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: company-service
        SERVICE_PORT: 8083
    image: fabric-company-service:latest
    container_name: fabric-company-service
    hostname: company-service-instance
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      # ✅ GOOGLE/AMAZON LEVEL: No service dependencies!
      # Services start in parallel - Feign fallback handles initial unavailability
      # Resilient architecture: One service down doesn't block others
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      JWT_SECRET: ${JWT_SECRET}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      JMX_PORT: 9013
      USER_SERVICE_URL: ${USER_SERVICE_URL:-http://user-service:8081}
      CONTACT_SERVICE_URL: ${CONTACT_SERVICE_URL:-http://contact-service:8082}
      SERVER_PORT: 8083
      # ✅ Resilience4j - Circuit Breaker (ZERO HARDCODED)
      FEIGN_CB_SLIDING_WINDOW: ${FEIGN_CB_SLIDING_WINDOW:-100}
      FEIGN_CB_MIN_CALLS: ${FEIGN_CB_MIN_CALLS:-10}
      FEIGN_CB_FAILURE_THRESHOLD: ${FEIGN_CB_FAILURE_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_THRESHOLD: ${FEIGN_CB_SLOW_CALL_THRESHOLD:-50}
      FEIGN_CB_SLOW_CALL_DURATION: ${FEIGN_CB_SLOW_CALL_DURATION:-5000}
      FEIGN_CB_WAIT_DURATION: ${FEIGN_CB_WAIT_DURATION:-30s}
      FEIGN_CB_HALF_OPEN_CALLS: ${FEIGN_CB_HALF_OPEN_CALLS:-5}
      # ✅ Resilience4j - Retry
      FEIGN_RETRY_MAX_ATTEMPTS: ${FEIGN_RETRY_MAX_ATTEMPTS:-3}
      FEIGN_RETRY_WAIT_DURATION: ${FEIGN_RETRY_WAIT_DURATION:-1000}
      FEIGN_RETRY_MULTIPLIER: ${FEIGN_RETRY_MULTIPLIER:-2}
      # ✅ Resilience4j - Timeout
      FEIGN_DEFAULT_TIMEOUT: ${FEIGN_DEFAULT_TIMEOUT:-10s}
      USER_SERVICE_TIMEOUT: ${USER_SERVICE_TIMEOUT:-15s}
      CONTACT_SERVICE_TIMEOUT: ${CONTACT_SERVICE_TIMEOUT:-15s}
    # Ports: Only JMX exposed for monitoring (HTTP via Gateway only)
    ports:
      - "${COMPANY_SERVICE_JMX_PORT:-9013}:9013" # JMX for monitoring
      # HTTP port 8083 NOT exposed - access via API Gateway (8080)
    networks:
      - fabric-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      <<: *healthcheck-defaults
      start_period: 90s
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

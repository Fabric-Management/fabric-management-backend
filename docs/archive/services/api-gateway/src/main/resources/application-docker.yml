# =============================================================================
# FABRIC MANAGEMENT SYSTEM - API GATEWAY DOCKER CONFIGURATION
# =============================================================================
# Docker environment configuration for API Gateway

spring:
  application:
    name: api-gateway

  # ===========================================================================
  # CACHE CONFIGURATION
  # ===========================================================================
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_CONNECTION_TIMEOUT:2000ms}
      connect-timeout: ${REDIS_COMMAND_TIMEOUT:3000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:2}

  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:300000} # 5 minutes

  # ===========================================================================
  # GATEWAY ROUTES CONFIGURATION
  # ===========================================================================
  # ‚úÖ Routes are managed via DynamicRoutesConfig.java (Type-safe, ZERO hardcoded!)
  # üìç Location: api-gateway/config/DynamicRoutesConfig.java
  # ‚úÖ Service URLs injected via @Value("${USER_SERVICE_URL}") in DynamicRoutesConfig
  cloud:
    gateway:
      # Routes configured programmatically for better type-safety and flexibility

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: ${API_GATEWAY_PORT:8080}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000} # 24 hours
  algorithm: ${JWT_ALGORITHM:HS256}
  issuer: ${JWT_ISSUER:fabric-management-system}
  audience: ${JWT_AUDIENCE:fabric-api}

# =============================================================================
# RESILIENCE4J CONFIGURATION
# =============================================================================
resilience4j:
  circuitbreaker:
    configs:
      default:
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
        slidingWindowSize: 100
        permittedNumberOfCallsInHalfOpenState: 10
        automaticTransitionFromOpenToHalfOpenEnabled: true
    instances:
      userServiceCircuitBreaker:
        baseConfig: default
      companyServiceCircuitBreaker:
        baseConfig: default
      contactServiceCircuitBreaker:
        baseConfig: default
      fiberServiceCircuitBreaker:
        baseConfig: default
      notificationServiceCircuitBreaker:
        baseConfig: default

  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 1s
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException

# =============================================================================
# MANAGEMENT & MONITORING
# =============================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: when-authorized
  prometheus:
    metrics:
      export:
        enabled: true

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level:
    com.fabricmanagement.gateway: DEBUG
    org.springframework.cloud.gateway: DEBUG
    org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping: TRACE
    org.springframework.web.reactive.function.client: DEBUG
    io.github.resilience4j.circuitbreaker: DEBUG
    org.springframework.security: WARN
    org.springframework.web: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  # File logging disabled in Docker - logs go to stdout/stderr

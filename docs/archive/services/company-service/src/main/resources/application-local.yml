# =============================================================================
# FABRIC MANAGEMENT SYSTEM - COMPANY SERVICE LOCAL DEVELOPMENT CONFIGURATION
# =============================================================================
# This profile is used for local development when running the service
# with Maven (mvn spring-boot:run) while infrastructure runs in Docker
# =============================================================================

spring:
  # ===========================================================================
  # DATABASE CONFIGURATION
  # ===========================================================================
  datasource:
    url: jdbc:postgresql://localhost:5433/fabric_management
    username: fabric_user
    password: local_dev_2024

  # ===========================================================================
  # FLYWAY CONFIGURATION
  # ===========================================================================
  flyway:
    table: flyway_schema_history_company

  # ===========================================================================
  # CACHE CONFIGURATION
  # ===========================================================================
  data:
    redis:
      host: localhost
      port: 6379
      password: local_redis_pass

  # ===========================================================================
  # KAFKA CONFIGURATION
  # ===========================================================================
  kafka:
    bootstrap-servers: localhost:9092

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: 8083

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
jwt:
  # ⚠️ LOCAL DEV ONLY - Do NOT use in production!
  # Production: Use strong secret from ${JWT_SECRET} environment variable
  secret: "EgUbMz7OOW7+57Ehxr2jUc7mFlEQPrs/XZirqOjhI4OF42Z+sW6hF7Rj9OMEjeCBBZHuzaBICuAlMtNMMZT+6A=="
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000} # 24 hours
  algorithm: ${JWT_ALGORITHM:HS256}
  issuer: ${JWT_ISSUER:fabric-management-system}
  audience: ${JWT_AUDIENCE:fabric-api}

# =============================================================================
# INTERNAL API CONFIGURATION (Required for Feign Client inter-service calls)
# =============================================================================
# ⚠️ LOCAL DEV ONLY - Use same key as Docker for consistency
# Set as environment variable: export INTERNAL_API_KEY="local-dev-internal-key-2024"
# Or Spring Boot will use this default
INTERNAL_API_KEY: ${INTERNAL_API_KEY:local-dev-internal-key-2024}

# =============================================================================
# EXTERNAL SERVICES CONFIGURATION
# =============================================================================
# ✅ Feign Clients use ${CONTACT_SERVICE_URL} and ${USER_SERVICE_URL} directly
# No need for kebab-case properties (deprecated pattern)

# =============================================================================
# RESILIENCE4J CONFIGURATION
# =============================================================================
# ✅ Inherited from application.yml (ZERO HARDCODED)
# Local dev uses same config as production for consistency

# Enable Feign with circuit breaker
feign:
  circuitbreaker:
    enabled: true
  client:
    config:
      default:
        connect-timeout: ${FEIGN_CONNECT_TIMEOUT:5000}
        read-timeout: ${FEIGN_READ_TIMEOUT:5000}

# =============================================================================
# DUPLICATE DETECTION CONFIGURATION
# =============================================================================
company:
  duplicate-detection:
    # Name similarity threshold (0.0-1.0). Higher = more strict
    # 0.80 = 80% similar names will be flagged
    name-similarity-threshold: 0.80

    # Database trigram search threshold for fuzzy matching
    # 0.30 = 30% similar names in database query
    database-search-threshold: 0.30

    # Autocomplete settings
    autocomplete-max-results: 10
    autocomplete-min-length: 2

    # Fuzzy search settings
    fuzzy-search-min-length: 3

    # Feature flags
    enable-full-text-search: true
    block-on-tax-id-match: true
    block-on-registration-match: true

# =============================================================================
# LOGGING CONFIGURATION (More verbose for local development)
# =============================================================================
logging:
  level:
    com.fabricmanagement.company: DEBUG
    org.springframework.security: INFO
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

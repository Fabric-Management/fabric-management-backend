# =============================================================================
# FABRIC MANAGEMENT SYSTEM - COMPANY SERVICE CONFIGURATION
# =============================================================================
# Service-specific configuration for company management service

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
spring:
  application:
    name: company-service
  profiles:
    active: local

  # ===========================================================================
  # DATABASE CONFIGURATION
  # ===========================================================================
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5433}/${POSTGRES_DB:fabric_management}
    username: ${POSTGRES_USER:fabric_user}
    password: ${POSTGRES_PASSWORD:fabric_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:10}
      minimum-idle: ${DB_POOL_MIN_IDLE:2}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        show_sql: false
    show-sql: false
    open-in-view: false

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true # ✅ REQUIRED: init.sql creates extensions/functions first
    baseline-version: 0 # ✅ Baseline at v0, so V1 migrations run
    validate-on-migrate: true

  # ===========================================================================
  # CACHE CONFIGURATION
  # ===========================================================================
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_CONNECTION_TIMEOUT:2000ms}
      connect-timeout: ${REDIS_COMMAND_TIMEOUT:3000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:2}

  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:300000} # 5 minutes

  # ===========================================================================
  # KAFKA CONFIGURATION
  # ===========================================================================
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      client-id: ${spring.application.name}-producer-${HOSTNAME:localhost}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: ${KAFKA_PRODUCER_ACKS:all}
      retries: ${KAFKA_PRODUCER_RETRIES:3}
      enable-idempotence: ${KAFKA_PRODUCER_IDEMPOTENCE:true}
      max-in-flight-requests-per-connection: ${KAFKA_PRODUCER_MAX_IN_FLIGHT:1}
      batch-size: ${KAFKA_PRODUCER_BATCH_SIZE:16384}
      linger-ms: ${KAFKA_PRODUCER_LINGER_MS:5}
      buffer-memory: ${KAFKA_PRODUCER_BUFFER_MEMORY:33554432}
    consumer:
      client-id: ${spring.application.name}-consumer-${HOSTNAME:localhost}
      # ErrorHandlingDeserializer wrapper for graceful error handling
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      group-id: ${KAFKA_CONSUMER_GROUP_ID:company-service-group}
      auto-offset-reset: ${KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
      enable-auto-commit: ${KAFKA_CONSUMER_ENABLE_AUTO_COMMIT:false}
      max-poll-records: ${KAFKA_CONSUMER_MAX_POLL_RECORDS:100}
      properties:
        # Trust all com.fabricmanagement.* packages (including sub-packages)
        spring.json.trusted.packages: ${KAFKA_TRUSTED_PACKAGES:com.fabricmanagement.*,java.util,java.lang}
        # Delegate deserializers (actual deserializers wrapped by ErrorHandlingDeserializer)
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        allow.auto.create.topics: ${KAFKA_AUTO_CREATE_TOPICS:true}
        jmx.prefix: company-service

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: ${COMPANY_SERVICE_PORT:8083}
  # Note: No context-path - Gateway handles API versioning and routing
  # Gateway strips /api/v1/companies prefix before forwarding to this service

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000} # 24 hours
  algorithm: ${JWT_ALGORITHM:HS256}
  issuer: ${JWT_ISSUER:fabric-management-system}
  audience: ${JWT_AUDIENCE:fabric-api}

# =============================================================================
# EXTERNAL SERVICES CONFIGURATION
# =============================================================================
contact-service:
  url: ${CONTACT_SERVICE_URL:http://localhost:8082}

user-service:
  url: ${USER_SERVICE_URL:http://localhost:8081}

# =============================================================================
# RESILIENCE4J CONFIGURATION
# =============================================================================
resilience4j:
  circuitbreaker:
    instances:
      user-service:
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
      contact-service:
        failureRateThreshold: 50
        waitDurationInOpenState: 30s
  retry:
    instances:
      user-service:
        maxAttempts: 3
      contact-service:
        maxAttempts: 3

# =============================================================================
# MANAGEMENT & MONITORING
# =============================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# =============================================================================
# OPENAPI/SWAGGER CONFIGURATION
# =============================================================================
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level:
    com.fabricmanagement.company: ${LOG_LEVEL:DEBUG}
    org.springframework.security: ${LOG_LEVEL:INFO}
    org.springframework.web: ${LOG_LEVEL:INFO}
    org.hibernate.SQL: ${LOG_LEVEL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL:TRACE}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/company-service.log

# =============================================================================
# TEXT PROCESSING CONFIGURATION (GLOBAL - Multi-Language Support)
# =============================================================================
# International text processing for company name normalization and similarity
# Supports Turkish, German, French, Spanish, Italian and more
text-processing:
  normalization:
    enabled: ${TEXT_NORMALIZATION_ENABLED:true}
    locale: ${TEXT_NORMALIZATION_LOCALE:en-US}
    remove-diacritics: ${TEXT_REMOVE_DIACRITICS:true}
    lowercase: ${TEXT_LOWERCASE:true}
    trim-whitespace: ${TEXT_TRIM_WHITESPACE:true}
    remove-company-suffixes: ${TEXT_REMOVE_SUFFIXES:true}

  similarity:
    algorithm: ${TEXT_SIMILARITY_ALGORITHM:JARO_WINKLER}
    threshold-block: ${TEXT_SIMILARITY_BLOCK:0.90} # >90% → BLOCK creation
    threshold-warn: ${TEXT_SIMILARITY_WARN:0.70} # 70-90% → WARN user
    threshold-suggest: ${TEXT_SIMILARITY_SUGGEST:0.50} # 50-70% → SUGGEST
    block-on-exact-match: ${TEXT_BLOCK_EXACT:true}
    block-on-high-similarity: ${TEXT_BLOCK_HIGH:true}
    enable-email-domain-check: ${EMAIL_DOMAIN_CHECK:true}
    email-domain-warning-only: ${EMAIL_DOMAIN_WARN_ONLY:true}

  masking:
    email-visible-chars: ${MASKING_EMAIL_CHARS:2}
    phone-visible-digits: ${MASKING_PHONE_DIGITS:4}
    masking-char: ${MASKING_CHAR:*}
    minimum-masked-chars: ${MASKING_MIN_CHARS:3}

# =============================================================================
# DUPLICATE DETECTION CONFIGURATION
# =============================================================================
# Configuration for company duplicate prevention system
# NO MAGIC NUMBERS! All thresholds are externalized and environment-configurable
company:
  duplicate-detection:
    # Similarity threshold for Jaro-Winkler algorithm (0.0-1.0)
    # 0.80 = 80% similar names will be flagged as potential duplicates
    # Can be overridden via environment: COMPANY_DUPLICATE_DETECTION_NAME_SIMILARITY_THRESHOLD
    name-similarity-threshold: ${DUPLICATE_NAME_THRESHOLD:0.80}

    # PostgreSQL trigram search threshold
    # 0.30 = 30% minimum similarity for database fuzzy search
    # Can be overridden via environment: COMPANY_DUPLICATE_DETECTION_DATABASE_SEARCH_THRESHOLD
    database-search-threshold: ${DUPLICATE_DB_THRESHOLD:0.30}

    # Autocomplete configuration
    autocomplete-max-results: ${AUTOCOMPLETE_MAX_RESULTS:10}
    autocomplete-min-length: ${AUTOCOMPLETE_MIN_LENGTH:2}

    # Fuzzy search configuration
    fuzzy-search-min-length: ${FUZZY_SEARCH_MIN_LENGTH:3}

    # Feature flags (can be toggled per environment)
    enable-full-text-search: ${ENABLE_FULL_TEXT_SEARCH:true}
    block-on-tax-id-match: ${BLOCK_ON_TAX_ID:true}
    block-on-registration-match: ${BLOCK_ON_REGISTRATION:true}

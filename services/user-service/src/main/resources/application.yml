# =============================================================================
# FABRIC MANAGEMENT SYSTEM - USER SERVICE CONFIGURATION
# =============================================================================
# Service-specific configuration for user management service

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
spring:
  application:
    name: user-service
  profiles:
    active: local

  # ===========================================================================
  # DATABASE CONFIGURATION
  # ===========================================================================
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5433}/${POSTGRES_DB:fabric_management}
    username: ${POSTGRES_USER:fabric_user}
    password: ${POSTGRES_PASSWORD:fabric_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:10}
      minimum-idle: ${DB_POOL_MIN_IDLE:2}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}

  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        show_sql: false
    show-sql: false
    open-in-view: false

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true # ✅ REQUIRED: init.sql creates extensions/functions first
    baseline-version: 0 # ✅ Baseline at v0, so V1 migrations run
    validate-on-migrate: true

  # ===========================================================================
  # CACHE CONFIGURATION
  # ===========================================================================
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_CONNECTION_TIMEOUT:2000ms}
      connect-timeout: ${REDIS_COMMAND_TIMEOUT:3000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:2}

  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:300000} # 5 minutes

  # ===========================================================================
  # KAFKA CONFIGURATION
  # ===========================================================================
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      client-id: ${spring.application.name}-producer-${HOSTNAME:localhost}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: ${KAFKA_PRODUCER_ACKS:all}
      retries: ${KAFKA_PRODUCER_RETRIES:3}
      enable-idempotence: ${KAFKA_PRODUCER_IDEMPOTENCE:true}
      max-in-flight-requests-per-connection: ${KAFKA_PRODUCER_MAX_IN_FLIGHT:1}
      batch-size: ${KAFKA_PRODUCER_BATCH_SIZE:16384}
      linger-ms: ${KAFKA_PRODUCER_LINGER_MS:5}
      buffer-memory: ${KAFKA_PRODUCER_BUFFER_MEMORY:33554432}
    consumer:
      client-id: ${spring.application.name}-consumer-${HOSTNAME:localhost}
      # ErrorHandlingDeserializer wrapper for graceful error handling
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      group-id: ${KAFKA_CONSUMER_GROUP_ID:user-service-group}
      auto-offset-reset: ${KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
      enable-auto-commit: ${KAFKA_CONSUMER_ENABLE_AUTO_COMMIT:false}
      max-poll-records: ${KAFKA_CONSUMER_MAX_POLL_RECORDS:100}
      properties:
        # Trust all com.fabricmanagement.* packages (including sub-packages)
        spring.json.trusted.packages: ${KAFKA_TRUSTED_PACKAGES:com.fabricmanagement.*,java.util,java.lang}
        # Delegate deserializers (actual deserializers wrapped by ErrorHandlingDeserializer)
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        allow.auto.create.topics: ${KAFKA_AUTO_CREATE_TOPICS:true}
        jmx.prefix: user-service

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: ${USER_SERVICE_PORT:8081}
  # Note: No context-path - Gateway handles API versioning and routing
  # Gateway strips /api/v1/users prefix before forwarding to this service

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
jwt:
  secret: ${JWT_SECRET:defaultSecretKeyForDevelopmentOnlyChangeInProduction1234567890}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000} # 24 hours
  algorithm: ${JWT_ALGORITHM:HS256}
  issuer: ${JWT_ISSUER:fabric-management-system}
  audience: ${JWT_AUDIENCE:fabric-api}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
security:
  login-attempt:
    max-attempts: 5 # Maximum failed login attempts before lockout
    lockout-duration-minutes: 15 # Account lockout duration in minutes
  response-time-masking:
    min-response-time-ms: 200 # Minimum response time to prevent timing attacks

# =============================================================================
# TOKEN CONFIGURATION
# =============================================================================
token:
  password-reset:
    expiry-minutes: 15 # Password reset token expiry time
    attempts: 3 # Maximum attempts for password reset
  verification:
    expiry-minutes: 15 # Verification code expiry time
    attempts: 5 # Maximum attempts for verification

# =============================================================================
# RESILIENCE4J CONFIGURATION (✅ ZERO HARDCODED - Production-Ready)
# =============================================================================
# Circuit Breaker Pattern for inter-service communication resilience
#
# Configuration Strategy (Google/Amazon Level):
# - Large sliding window (100) for statistical significance
# - Balanced thresholds (50%) for failure/slow calls
# - Environment-based tuning via ${VAR:default}
# - Separate configuration per service
#
# Monitoring:
# - Track circuit state changes via actuator/health
# - Alert on OPEN state > 1 minute
# - P95 response times should guide slow call thresholds
#
resilience4j:
  circuitbreaker:
    configs:
      default:
        # Sliding window for calculating failure rate
        sliding-window-type: COUNT_BASED
        sliding-window-size: ${FEIGN_CB_SLIDING_WINDOW:100} # ✅ Statistical significance
        minimum-number-of-calls: ${FEIGN_CB_MIN_CALLS:10} # ✅ Min calls before circuit can open

        # Failure thresholds
        failure-rate-threshold: ${FEIGN_CB_FAILURE_THRESHOLD:50} # 50% failures → OPEN
        slow-call-rate-threshold: ${FEIGN_CB_SLOW_CALL_THRESHOLD:50} # 50% slow calls → OPEN
        slow-call-duration-threshold: ${FEIGN_CB_SLOW_CALL_DURATION:5000} # 5s = slow (ms)

        # Circuit breaker behavior
        wait-duration-in-open-state: ${FEIGN_CB_WAIT_DURATION:30s} # Wait 30s before half-open
        permitted-number-of-calls-in-half-open-state: ${FEIGN_CB_HALF_OPEN_CALLS:5} # Test with 5 calls
        automatic-transition-from-open-to-half-open-enabled: true # Auto recovery

        # Exceptions to record as failure
        record-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - feign.FeignException

        # Exceptions to ignore (don't count as failure)
        ignore-exceptions:
          - java.lang.IllegalArgumentException

    instances:
      contact-service:
        base-config: default
        # Override if needed:
        # slow-call-duration-threshold: 7000  # Contact operations may take longer

      company-service:
        base-config: default
        # Override if needed:
        # slow-call-duration-threshold: 8000  # Company creation is heavier

  # =============================================================================
  # RETRY CONFIGURATION
  # =============================================================================
  retry:
    configs:
      default:
        max-attempts: ${FEIGN_RETRY_MAX_ATTEMPTS:3}
        wait-duration: ${FEIGN_RETRY_WAIT_DURATION:1000} # 1s between retries
        enable-exponential-backoff: true
        exponential-backoff-multiplier: ${FEIGN_RETRY_MULTIPLIER:2}
        retry-exceptions:
          - java.io.IOException
          - feign.RetryableException

    instances:
      contact-service:
        base-config: default

      company-service:
        base-config: default

  # =============================================================================
  # TIMEOUT CONFIGURATION (Time Limiter)
  # =============================================================================
  timelimiter:
    configs:
      default:
        timeout-duration: ${FEIGN_DEFAULT_TIMEOUT:10s} # Default 10s
        cancel-running-future: true

    instances:
      contact-service:
        timeout-duration: ${CONTACT_SERVICE_TIMEOUT:15s} # ✅ Contact operations need more time

      company-service:
        timeout-duration: ${COMPANY_SERVICE_TIMEOUT:15s} # ✅ Company creation is complex

# =============================================================================
# MANAGEMENT & MONITORING
# =============================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# =============================================================================
# OPENAPI/SWAGGER CONFIGURATION
# =============================================================================
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level:
    com.fabricmanagement.user: ${LOG_LEVEL:INFO}
    org.springframework.security: ${LOG_LEVEL:INFO}
    org.springframework.web: ${LOG_LEVEL:INFO}
    org.hibernate.SQL: ${LOG_LEVEL:INFO}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} [%X{X-Correlation-ID}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} [%X{X-Correlation-ID}] - %msg%n"
  file:
    name: logs/user-service.log

server:
  port: ${NOTIFICATION_SERVICE_PORT:8084}

spring:
  application:
    name: notification-service

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:local}

  datasource:
    url: ${NOTIFICATION_DB_URL:jdbc:postgresql://localhost:5432/notification_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:10}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true

  flyway:
    enabled: ${FLYWAY_ENABLED:true}
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 0

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:notification-service-group}
      auto-offset-reset: ${KAFKA_AUTO_OFFSET_RESET:earliest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# Kafka Topics
kafka:
  topics:
    user-created: ${KAFKA_TOPIC_USER_CREATED:user.created}
    user-password-reset: ${KAFKA_TOPIC_USER_PASSWORD_RESET:user.password.reset}
    contact-verification: ${KAFKA_TOPIC_CONTACT_VERIFICATION:contact.verification}

  mail:
    # Platform fallback SMTP (tenant-specific configs override this)
    host: ${PLATFORM_SMTP_HOST:smtp.hostinger.com}
    port: ${PLATFORM_SMTP_PORT:465}
    username: ${PLATFORM_SMTP_USERNAME:noreply@storeandsale.shop}
    password: ${PLATFORM_SMTP_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          ssl:
            enable: true
          socketFactory:
            port: 465
            class: javax.net.ssl.SSLSocketFactory

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: ${REDIS_TIMEOUT:2000}

  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:3600000}

# Security Configuration
security:
  jwt:
    secret: ${JWT_SECRET:your-secret-key-change-in-production}
    expiration: ${JWT_EXPIRATION:3600000}
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000}
  internal:
    api-key: ${INTERNAL_API_KEY:default-internal-key}

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Notification Configuration
notification:
  platform:
    # Platform fallback credentials (used if tenant has no config)
    email:
      from: ${PLATFORM_EMAIL_FROM:info@storeandsale.shop}
      fromName: ${PLATFORM_EMAIL_FROM_NAME:Fabricode}
    sms:
      enabled: ${PLATFORM_SMS_ENABLED:false}
      provider: ${PLATFORM_SMS_PROVIDER:}
      apiKey: ${PLATFORM_SMS_API_KEY:}
      fromNumber: ${PLATFORM_SMS_FROM_NUMBER:+447553838399}
    whatsapp:
      enabled: ${PLATFORM_WHATSAPP_ENABLED:true}
      provider: ${PLATFORM_WHATSAPP_PROVIDER:META}
      accessToken: ${PLATFORM_WHATSAPP_ACCESS_TOKEN:}
      phoneNumberId: ${PLATFORM_WHATSAPP_PHONE_NUMBER_ID:}
      wabaId: ${PLATFORM_WHATSAPP_WABA_ID:}
      fromNumber: ${PLATFORM_WHATSAPP_FROM_NUMBER:+447553838399}
      testNumber: ${PLATFORM_WHATSAPP_TEST_NUMBER:}

  retry:
    maxAttempts: ${NOTIFICATION_RETRY_MAX_ATTEMPTS:3}
    backoffMs: ${NOTIFICATION_RETRY_BACKOFF_MS:1000}

  verification:
    codeLength: ${VERIFICATION_CODE_LENGTH:6}
    expirationMinutes: ${VERIFICATION_CODE_EXPIRATION_MINUTES:15}

# Logging
logging:
  level:
    root: INFO
    com.fabricmanagement.notification: ${LOG_LEVEL:DEBUG}
    org.springframework.kafka: ${KAFKA_LOG_LEVEL:INFO}
    org.springframework.mail: ${MAIL_LOG_LEVEL:DEBUG}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

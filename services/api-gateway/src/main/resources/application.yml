# =============================================================================
# FABRIC MANAGEMENT SYSTEM - API GATEWAY CONFIGURATION
# =============================================================================
# Central entry point for all microservices

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
spring:
  application:
    name: api-gateway
  profiles:
    active: local
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

# =============================================================================
# GATEWAY PROPERTIES (Type-safe configuration)
# =============================================================================
gateway:
  services:
    user-service:
      name: user-service
      url: ${USER_SERVICE_URL:http://localhost:8081}
      path: /api/v1/users
      enabled: true
      timeout: ${USER_SERVICE_TIMEOUT:15s}
    company-service:
      name: company-service
      url: ${COMPANY_SERVICE_URL:http://localhost:8083}
      path: /api/v1/companies
      enabled: true
      timeout: ${COMPANY_SERVICE_TIMEOUT:15s}
    contact-service:
      name: contact-service
      url: ${CONTACT_SERVICE_URL:http://localhost:8082}
      path: /api/v1/contacts
      enabled: true
      timeout: ${CONTACT_SERVICE_TIMEOUT:15s}

  rate-limit:
    public-endpoints:
      login-replenish-rate: ${GATEWAY_RATE_LOGIN_REPLENISH:5}
      login-burst-capacity: ${GATEWAY_RATE_LOGIN_BURST:10}
      onboarding-replenish-rate: ${GATEWAY_RATE_ONBOARDING_REPLENISH:5}
      onboarding-burst-capacity: ${GATEWAY_RATE_ONBOARDING_BURST:10}
      check-contact-replenish-rate: ${GATEWAY_RATE_CHECK_CONTACT_REPLENISH:10}
      check-contact-burst-capacity: ${GATEWAY_RATE_CHECK_CONTACT_BURST:15}
      setup-password-replenish-rate: ${GATEWAY_RATE_SETUP_PASSWORD_REPLENISH:3}
      setup-password-burst-capacity: ${GATEWAY_RATE_SETUP_PASSWORD_BURST:5}
      other-auth-replenish-rate: ${GATEWAY_RATE_OTHER_AUTH_REPLENISH:20}
      other-auth-burst-capacity: ${GATEWAY_RATE_OTHER_AUTH_BURST:30}
    protected-endpoints:
      standard-replenish-rate: ${GATEWAY_RATE_PROTECTED_REPLENISH:50}
      standard-burst-capacity: ${GATEWAY_RATE_PROTECTED_BURST:100}
      internal-endpoint-replenish-rate: ${GATEWAY_RATE_INTERNAL_REPLENISH:5}
      internal-endpoint-burst-capacity: ${GATEWAY_RATE_INTERNAL_BURST:10}

  circuit-breaker:
    sliding-window-size: ${GATEWAY_CB_SLIDING_WINDOW:100}
    minimum-number-of-calls: ${GATEWAY_CB_MIN_CALLS:10}
    permitted-calls-in-half-open: ${GATEWAY_CB_HALF_OPEN_CALLS:5}
    wait-duration-in-open-state: ${GATEWAY_CB_WAIT_DURATION:30s}
    failure-rate-threshold: ${GATEWAY_CB_FAILURE_THRESHOLD:50}
    slow-call-rate-threshold: ${GATEWAY_CB_SLOW_CALL_THRESHOLD:50}
    slow-call-duration-threshold: ${GATEWAY_CB_SLOW_CALL_DURATION:8s}

  retry:
    max-attempts: ${GATEWAY_RETRY_MAX_ATTEMPTS:3}
    initial-backoff: ${GATEWAY_RETRY_INITIAL_BACKOFF:50ms}
    max-backoff: ${GATEWAY_RETRY_MAX_BACKOFF:500ms}
    multiplier: ${GATEWAY_RETRY_MULTIPLIER:2.0}
    public-routes-initial-backoff: ${GATEWAY_RETRY_PUBLIC_INITIAL:100ms}
    protected-routes-initial-backoff: ${GATEWAY_RETRY_PROTECTED_INITIAL:50ms}

  # ===========================================================================
  # GATEWAY ROUTES CONFIGURATION
  # ===========================================================================
  # ‚úÖ Routes are managed via DynamicRoutesConfig.java (Type-safe, ZERO hardcoded!)
  # üìç Location: api-gateway/config/DynamicRoutesConfig.java
  cloud:
    gateway:
      # Routes configured programmatically for better type-safety and flexibility

      # Global CORS Configuration
      # Updated to Spring Cloud Gateway 4.x format
      server:
        webflux:
          globalcors:
            cors-configurations:
              "[/**]":
                # Frontend URLs - Override with CORS_ALLOWED_ORIGINS env var
                # Format: comma-separated URLs
                # Example: http://localhost:3000,http://localhost:4200,https://app.example.com
                allowedOrigins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:4200}
                allowedMethods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - PATCH
                  - OPTIONS
                allowedHeaders:
                  - "Authorization"
                  - "Content-Type"
                  - "X-Requested-With"
                  - "Accept"
                  - "Origin"
                allowCredentials: true
                maxAge: 3600

      # Default filters for all routes (kept at gateway level)
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddRequestHeader=X-Gateway-Request, true
        - AddResponseHeader=X-Gateway-Response, API-Gateway

  # ===========================================================================
  # REDIS CONFIGURATION (for Rate Limiting)
  # ===========================================================================
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_CONNECTION_TIMEOUT:2000ms}
      connect-timeout: ${REDIS_COMMAND_TIMEOUT:3000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:2}

  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:300000} # 5 minutes

  # ===========================================================================
  # KAFKA CONFIGURATION (Audit Events - Non-blocking)
  # ===========================================================================
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: ${KAFKA_PRODUCER_ACKS:1}
      retries: ${KAFKA_PRODUCER_RETRIES:0}
      properties:
        # ‚úÖ Fast fail if topic missing (5s vs 60s default)
        request.timeout.ms: ${KAFKA_PRODUCER_TIMEOUT:5000}
        max.block.ms: ${KAFKA_MAX_BLOCK_MS:5000}
        delivery.timeout.ms: ${KAFKA_DELIVERY_TIMEOUT:10000}

# =============================================================================
# POLICY CONFIGURATION
# =============================================================================
policy:
  audit:
    # ‚úÖ Config-driven: Enable/disable policy audit events
    # Set to false if policy.audit Kafka topic not available
    enabled: ${POLICY_AUDIT_ENABLED:false}

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: ${API_GATEWAY_PORT:8080}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000} # 24 hours
  algorithm: ${JWT_ALGORITHM:HS256}
  issuer: ${JWT_ISSUER:fabric-management-system}
  audience: ${JWT_AUDIENCE:fabric-api}

# =============================================================================
# RESILIENCE4J CONFIGURATION
# =============================================================================
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: ${GATEWAY_CB_SLIDING_WINDOW:100}
        minimum-number-of-calls: ${GATEWAY_CB_MIN_CALLS:10}
        permitted-number-of-calls-in-half-open-state: ${GATEWAY_CB_HALF_OPEN_CALLS:5}
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: ${GATEWAY_CB_WAIT_DURATION:30s}
        failure-rate-threshold: ${GATEWAY_CB_FAILURE_THRESHOLD:50}
        slow-call-rate-threshold: ${GATEWAY_CB_SLOW_CALL_THRESHOLD:50}
        slow-call-duration-threshold: ${GATEWAY_CB_SLOW_CALL_DURATION:8s}
        record-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
    instances:
      userServiceCircuitBreaker:
        base-config: default
      companyServiceCircuitBreaker:
        base-config: default
      contactServiceCircuitBreaker:
        base-config: default

  timelimiter:
    configs:
      default:
        timeout-duration: ${GATEWAY_DEFAULT_TIMEOUT:15s}
    instances:
      userServiceCircuitBreaker:
        base-config: default
        # Tenant onboarding with validations: P95=15s (5 sequential Feign)
        # After parallel optimization: P95=3s ‚Üí Timeout 6s
        # Current (before optimization): 30s buffer for safety
        timeout-duration: ${USER_SERVICE_TIMEOUT:30s}
      companyServiceCircuitBreaker:
        base-config: default
        # Company operations: P95=5s ‚Üí Timeout 7.5s (%50 buffer) ‚Üí Round to 10s
        timeout-duration: ${COMPANY_SERVICE_TIMEOUT:10s}
      contactServiceCircuitBreaker:
        base-config: default
        # Contact operations: P95=3s ‚Üí Timeout 4.5s (%50 buffer) ‚Üí Round to 7s
        timeout-duration: ${CONTACT_SERVICE_TIMEOUT:7s}

  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 100ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
    instances:
      userServiceCircuitBreaker:
        base-config: default
      companyServiceCircuitBreaker:
        base-config: default
      contactServiceCircuitBreaker:
        base-config: default

# =============================================================================
# MANAGEMENT & MONITORING
# =============================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: true

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level:
    com.fabricmanagement.gateway: ${LOG_LEVEL:DEBUG}
    org.springframework.cloud.gateway: ${LOG_LEVEL:INFO}
    reactor.netty: ${LOG_LEVEL:INFO}
    io.netty: ${LOG_LEVEL:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# =============================================================================
# FABRIC MANAGEMENT SYSTEM - API GATEWAY CONFIGURATION
# =============================================================================
# Central entry point for all microservices

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
spring:
  application:
    name: api-gateway
  profiles:
    active: local
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

  # ===========================================================================
  # GATEWAY ROUTES CONFIGURATION
  # ===========================================================================
  cloud:
    gateway:
      routes:
        # User Service - Public Auth Routes (No Rate Limiting)
        # Pattern: /api/v1/users/auth/** - Authentication endpoints
        # Gateway strips /api/v1/users, forwards /auth/** to service
        - id: user-service-public
          uri: ${USER_SERVICE_URL:http://localhost:8081}
          predicates:
            - Path=/api/v1/users/auth/**
          filters:
            - StripPrefix=3
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
                fallbackUri: forward:/fallback/user-service
            - name: Retry
              args:
                retries: 3
                methods: GET,POST
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms
                  factor: 2
                  basedOnPreviousValue: true

        # User Service - Protected Routes (With Rate Limiting)
        # Pattern: /api/v1/users/** (excluding auth)
        # Gateway strips /api/v1/users, forwards /** to service
        - id: user-service-protected
          uri: ${USER_SERVICE_URL:http://localhost:8081}
          predicates:
            - Path=/api/v1/users/**
          filters:
            - StripPrefix=3
            - name: CircuitBreaker
              args:
                name: userServiceCircuitBreaker
                fallbackUri: forward:/fallback/user-service
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@smartKeyResolver}"
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100
                redis-rate-limiter.requestedTokens: 1
            - name: Retry
              args:
                retries: 3
                methods: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms
                  factor: 2
                  basedOnPreviousValue: true

        # Company Service Routes (Protected - With Rate Limiting)
        - id: company-service
          uri: ${COMPANY_SERVICE_URL:http://localhost:8083}
          predicates:
            - Path=/api/v1/companies/**
          filters:
            - StripPrefix=3
            - name: CircuitBreaker
              args:
                name: companyServiceCircuitBreaker
                fallbackUri: forward:/fallback/company-service
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@smartKeyResolver}"
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100
                redis-rate-limiter.requestedTokens: 1
            - name: Retry
              args:
                retries: 3
                methods: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms

        # Contact Service Routes (Protected - With Rate Limiting)
        - id: contact-service
          uri: ${CONTACT_SERVICE_URL:http://localhost:8082}
          predicates:
            - Path=/api/v1/contacts/**
          filters:
            - StripPrefix=3
            - name: CircuitBreaker
              args:
                name: contactServiceCircuitBreaker
                fallbackUri: forward:/fallback/contact-service
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@smartKeyResolver}"
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100
                redis-rate-limiter.requestedTokens: 1
            - name: Retry
              args:
                retries: 3
                methods: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms

      # Global CORS Configuration
      # Updated to Spring Cloud Gateway 4.x format
      server:
        webflux:
          globalcors:
            cors-configurations:
              "[/**]":
                allowedOrigins:
                  - "http://localhost:3000"
                  - "http://localhost:4200"
                allowedMethods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - PATCH
                  - OPTIONS
                allowedHeaders:
                  - "Authorization"
                  - "Content-Type"
                  - "X-Requested-With"
                  - "Accept"
                  - "Origin"
                allowCredentials: true
                maxAge: 3600

      # Default filters for all routes (kept at gateway level)
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddRequestHeader=X-Gateway-Request, true
        - AddResponseHeader=X-Gateway-Response, API-Gateway

  # ===========================================================================
  # REDIS CONFIGURATION (for Rate Limiting)
  # ===========================================================================
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: ${REDIS_CONNECTION_TIMEOUT:2000ms}
      connect-timeout: ${REDIS_COMMAND_TIMEOUT:3000ms}
      lettuce:
        pool:
          max-active: ${REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${REDIS_POOL_MAX_IDLE:8}
          min-idle: ${REDIS_POOL_MIN_IDLE:2}

  cache:
    type: redis
    redis:
      time-to-live: ${CACHE_TTL:300000} # 5 minutes

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
server:
  port: ${API_GATEWAY_PORT:8080}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400000} # 24 hours
  algorithm: ${JWT_ALGORITHM:HS256}
  issuer: ${JWT_ISSUER:fabric-management-system}
  audience: ${JWT_AUDIENCE:fabric-api}

# =============================================================================
# RESILIENCE4J CONFIGURATION
# =============================================================================
resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 100
        minimum-number-of-calls: 10
        permitted-number-of-calls-in-half-open-state: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
        record-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
    instances:
      userServiceCircuitBreaker:
        base-config: default
      companyServiceCircuitBreaker:
        base-config: default
      contactServiceCircuitBreaker:
        base-config: default

  timelimiter:
    configs:
      default:
        timeout-duration: 5s
    instances:
      userServiceCircuitBreaker:
        base-config: default
      companyServiceCircuitBreaker:
        base-config: default
      contactServiceCircuitBreaker:
        base-config: default

  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 100ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
    instances:
      userServiceCircuitBreaker:
        base-config: default
      companyServiceCircuitBreaker:
        base-config: default
      contactServiceCircuitBreaker:
        base-config: default

# =============================================================================
# MANAGEMENT & MONITORING
# =============================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: true

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
logging:
  level:
    com.fabricmanagement.gateway: ${LOG_LEVEL:DEBUG}
    org.springframework.cloud.gateway: ${LOG_LEVEL:INFO}
    reactor.netty: ${LOG_LEVEL:INFO}
    io.netty: ${LOG_LEVEL:INFO}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

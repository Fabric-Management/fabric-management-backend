name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: fabric-management

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    strategy:
      matrix:
        service: [auth-service, user-service, company-service, contact-service]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate tags and labels
      id: meta
      run: |
        # Generate proper tags based on ref type
        if [[ "${{ github.ref_type }}" == "branch" ]]; then
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:latest"
            TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${GITHUB_SHA:0:7}"
          else
            # For feature branches, use branch name (sanitized)
            BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${BRANCH_NAME}"
            TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${BRANCH_NAME}-${GITHUB_SHA:0:7}"
          fi
        elif [[ "${{ github.ref_type }}" == "tag" ]]; then
          # For tags, use the tag name
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${{ github.ref_name }}"
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:${GITHUB_SHA:0:7}"
        else
          # For PRs, use pr- prefix
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:pr-${{ github.event.number }}"
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}:pr-${{ github.event.number }}-${GITHUB_SHA:0:7}"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        
        # Generate labels
        echo "labels<<EOF" >> $GITHUB_OUTPUT
        echo "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" >> $GITHUB_OUTPUT
        echo "org.opencontainers.image.version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "org.opencontainers.image.revision=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "org.opencontainers.image.title=${{ matrix.service }}" >> $GITHUB_OUTPUT
        echo "org.opencontainers.image.description=Fabric Management ${{ matrix.service }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/${{ matrix.service }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.service }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

name: Build All Services

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  test-all:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, user-service, contact-service, company-service]

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Build dependencies
      run: |
        mvn clean install -N
        mvn clean install -f common/common-core/pom.xml
        mvn clean install -f common/common-security/pom.xml

    - name: Test ${{ matrix.service }}
      run: mvn test -f services/${{ matrix.service }}/pom.xml

  build-all-images:
    needs: test-all
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [auth-service, user-service, contact-service, company-service]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for ${{ matrix.service }}
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/fabric-management/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push ${{ matrix.service }} Docker image
      uses: docker/build-push-action@v5
      with:
        context: .  # CRITICAL: Use root directory as context for all services
        file: ./services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ matrix.service }}
        cache-to: type=gha,mode=max,scope=${{ matrix.service }}
